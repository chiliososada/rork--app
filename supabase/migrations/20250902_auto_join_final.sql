-- ============================================
-- Ëá™ÂãïÂèÇÂä†„Ç∑„Çπ„ÉÜ„É† - ÊúÄÁµÇÁâà
-- 2025-09-02 Final Implementation
-- ============================================
-- 
-- ÂâçÊèêÊù°‰ª∂: 20250902_cleanup_auto_join.sql „ÇíÂÖà„Å´ÂÆüË°åÊ∏à„Åø
-- ÁõÆÁöÑ: ÂÆâÂÆö„Åó„ÅüËá™ÂãïÂèÇÂä†„Ç∑„Çπ„ÉÜ„É†„ÅÆÊßãÁØâ
-- 
-- Ê©üËÉΩ:
-- - „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÊôÇ„ÅÆËá™ÂãïÂèÇÂä†
-- - „Ç≥„É°„É≥„ÉàÊäïÁ®øÊôÇ„ÅÆËá™ÂãïÂèÇÂä†  
-- - Ë©±È°å‰ΩúÊàêÊôÇ„ÅÆËá™ÂãïÂèÇÂä†Ôºà‰ΩúÊàêËÄÖÔºâ
-- - „ÅÑ„ÅÑ„Å≠ÊôÇ„ÅÆËá™ÂãïÂèÇÂä†Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
-- - Êó¢Â≠ò„Éá„Éº„Çø„ÅÆ‰øÆÂæ©Ê©üËÉΩ
-- - Ë©≥Á¥∞„Å™„É≠„Ç∞Âá∫Âäõ„Å®„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
-- 
-- ============================================

-- ÈñãÂßã„É≠„Ç∞
SELECT 
    'üöÄ Ëá™ÂãïÂèÇÂä†„Ç∑„Çπ„ÉÜ„É†ÊúÄÁµÇÁâà„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÈñãÂßã' as status,
    NOW()::text as started_at;

-- ============================================
-- 1. „É°„Ç§„É≥Èñ¢Êï∞: auto_join_topic
-- ============================================
CREATE OR REPLACE FUNCTION auto_join_topic(
    p_user_id UUID,
    p_topic_id UUID
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_result JSONB;
    v_existing_record RECORD;
    v_participant_id UUID;
    v_user_exists BOOLEAN;
    v_topic_exists BOOLEAN;
    v_function_start_time TIMESTAMP;
BEGIN
    v_function_start_time := NOW();
    
    -- ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø„ÅÆ„É≠„Ç∞
    RAISE NOTICE '[auto_join_topic] ÈñãÂßã - user_id: %, topic_id: %', p_user_id, p_topic_id;
    
    -- ====================================
    -- Âü∫Êú¨ÁöÑ„Å™Ê§úË®º
    -- ====================================
    
    -- NULL „ÉÅ„Çß„ÉÉ„ÇØ
    IF p_user_id IS NULL OR p_topic_id IS NULL THEN
        RAISE WARNING '[auto_join_topic] ÁÑ°Âäπ„Å™„Éë„É©„É°„Éº„Çø: user_id=%, topic_id=%', p_user_id, p_topic_id;
        RETURN jsonb_build_object(
            'success', false,
            'error_code', 'INVALID_PARAMS',
            'message', 'user_id „Åæ„Åü„ÅØ topic_id „Åå NULL „Åß„Åô',
            'user_id', p_user_id,
            'topic_id', p_topic_id,
            'timestamp', v_function_start_time
        );
    END IF;

    -- „É¶„Éº„Ç∂„ÉºÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
    SELECT EXISTS(SELECT 1 FROM users WHERE id = p_user_id) INTO v_user_exists;
    IF NOT v_user_exists THEN
        RAISE WARNING '[auto_join_topic] „É¶„Éº„Ç∂„Éº„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì: user_id=%', p_user_id;
        RETURN jsonb_build_object(
            'success', false,
            'error_code', 'USER_NOT_FOUND',
            'message', 'ÊåáÂÆö„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì',
            'user_id', p_user_id,
            'topic_id', p_topic_id,
            'timestamp', v_function_start_time
        );
    END IF;

    -- Ë©±È°åÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
    SELECT EXISTS(SELECT 1 FROM topics WHERE id = p_topic_id AND (is_hidden IS NULL OR is_hidden = false)) INTO v_topic_exists;
    IF NOT v_topic_exists THEN
        RAISE WARNING '[auto_join_topic] Ë©±È°å„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„ÅãÈùûË°®Á§∫„Åß„Åô: topic_id=%', p_topic_id;
        RETURN jsonb_build_object(
            'success', false,
            'error_code', 'TOPIC_NOT_FOUND',
            'message', 'ÊåáÂÆö„Åï„Çå„ÅüË©±È°å„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Åã„ÄÅÈùûË°®Á§∫„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô',
            'user_id', p_user_id,
            'topic_id', p_topic_id,
            'timestamp', v_function_start_time
        );
    END IF;

    -- ====================================
    -- ÂèÇÂä†Áä∂ÊÖã„ÅÆÁ¢∫Ë™ç„Å®Âá¶ÁêÜ
    -- ====================================

    -- Êó¢Â≠ò„ÅÆÂèÇÂä†Ë®òÈå≤„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    SELECT * INTO v_existing_record
    FROM topic_participants
    WHERE user_id = p_user_id AND topic_id = p_topic_id;

    IF FOUND THEN
        -- Êó¢Â≠ò„É¨„Ç≥„Éº„Éâ„Åå„ÅÇ„ÇãÂ†¥Âêà
        IF v_existing_record.is_active THEN
            -- Êó¢„Å´„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂèÇÂä†ËÄÖ
            RAISE NOTICE '[auto_join_topic] „É¶„Éº„Ç∂„Éº„ÅØÊó¢„Å´„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂèÇÂä†ËÄÖ: user_id=%, topic_id=%', p_user_id, p_topic_id;
            v_result := jsonb_build_object(
                'success', true,
                'action', 'already_active',
                'message', '„É¶„Éº„Ç∂„Éº„ÅØÊó¢„Å´„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂèÇÂä†ËÄÖ„Åß„Åô',
                'participant_id', v_existing_record.id,
                'joined_at', v_existing_record.joined_at,
                'execution_time_ms', EXTRACT(MILLISECONDS FROM (NOW() - v_function_start_time))
            );
        ELSE
            -- Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂèÇÂä†ËÄÖ„ÇíÂÜç„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ
            UPDATE topic_participants
            SET is_active = TRUE,
                joined_at = NOW()
            WHERE id = v_existing_record.id
            RETURNING id INTO v_participant_id;
            
            RAISE NOTICE '[auto_join_topic] ÂèÇÂä†ËÄÖ„ÇíÂÜç„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ: user_id=%, topic_id=%, participant_id=%', 
                         p_user_id, p_topic_id, v_participant_id;
            
            v_result := jsonb_build_object(
                'success', true,
                'action', 'reactivated',
                'message', 'Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂèÇÂä†ËÄÖ„ÇíÂÜç„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ„Åó„Åæ„Åó„Åü',
                'participant_id', v_participant_id,
                'joined_at', NOW(),
                'execution_time_ms', EXTRACT(MILLISECONDS FROM (NOW() - v_function_start_time))
            );
        END IF;
    ELSE
        -- Êñ∞Ë¶èÂèÇÂä†ËÄÖ„Å®„Åó„Å¶ËøΩÂä†
        INSERT INTO topic_participants (user_id, topic_id, is_active, joined_at)
        VALUES (p_user_id, p_topic_id, TRUE, NOW())
        RETURNING id INTO v_participant_id;
        
        RAISE NOTICE '[auto_join_topic] Êñ∞Ë¶èÂèÇÂä†ËÄÖ„ÇíËøΩÂä†: user_id=%, topic_id=%, participant_id=%', 
                     p_user_id, p_topic_id, v_participant_id;
        
        v_result := jsonb_build_object(
            'success', true,
            'action', 'joined',
            'message', 'Êñ∞Ë¶èÂèÇÂä†ËÄÖ„Å®„Åó„Å¶ËøΩÂä†„Åó„Åæ„Åó„Åü',
            'participant_id', v_participant_id,
            'joined_at', NOW(),
            'execution_time_ms', EXTRACT(MILLISECONDS FROM (NOW() - v_function_start_time))
        );
    END IF;

    RETURN v_result;

EXCEPTION
    WHEN unique_violation THEN
        -- ÂêåÊôÇÂÆüË°å„Å´„Çà„ÇãÈáçË§á„Ç®„É©„ÉºÔºàÊ≠£Â∏∏„Å™Áä∂Ê≥ÅÔºâ
        RAISE NOTICE '[auto_join_topic] ÂêåÊôÇÂÆüË°å„Å´„Çà„ÇãÈáçË§á - user_id=%, topic_id=%', p_user_id, p_topic_id;
        RETURN jsonb_build_object(
            'success', true,
            'action', 'concurrent_join',
            'message', 'ÂêåÊôÇÂÆüË°å„Å´„Çà„ÇäÊó¢„Å´ÂèÇÂä†Ê∏à„Åø„Åß„Åô',
            'user_id', p_user_id,
            'topic_id', p_topic_id,
            'execution_time_ms', EXTRACT(MILLISECONDS FROM (NOW() - v_function_start_time))
        );
    WHEN OTHERS THEN
        -- „Åù„ÅÆ‰ªñ„ÅÆ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº
        RAISE EXCEPTION '[auto_join_topic] ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº - user_id=%, topic_id=%, error=%', 
                    p_user_id, p_topic_id, SQLERRM;
        RETURN jsonb_build_object(
            'success', false,
            'error_code', 'UNEXPECTED_ERROR',
            'error', SQLERRM,
            'message', 'ÂèÇÂä†Âá¶ÁêÜ‰∏≠„Å´‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
            'user_id', p_user_id,
            'topic_id', p_topic_id,
            'execution_time_ms', EXTRACT(MILLISECONDS FROM (NOW() - v_function_start_time))
        );
END;
$$;

-- ============================================
-- 2. „Éà„É™„Ç¨„ÉºÈñ¢Êï∞: „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÊôÇ
-- ============================================
CREATE OR REPLACE FUNCTION trigger_auto_join_on_message()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    v_result JSONB;
BEGIN
    -- „Éà„É™„Ç¨„ÉºÈñãÂßã„É≠„Ç∞
    RAISE NOTICE '[trigger_auto_join_on_message] ÈñãÂßã - message_id=%, user_id=%, topic_id=%', 
                 NEW.id, NEW.user_id, NEW.topic_id;
    
    -- Ëá™ÂãïÂèÇÂä†Âá¶ÁêÜ„ÇíÂÆüË°å
    v_result := auto_join_topic(NEW.user_id, NEW.topic_id);
    
    -- ÁµêÊûú„ÅÆ„É≠„Ç∞Âá∫Âäõ
    IF (v_result->>'success')::boolean THEN
        RAISE NOTICE '[trigger_auto_join_on_message] ÊàêÂäü - action=%, message_id=%', 
                     v_result->>'action', NEW.id;
    ELSE
        RAISE WARNING '[trigger_auto_join_on_message] Â§±Êïó - error=%, message_id=%', 
                      v_result->>'message', NEW.id;
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        -- „Éà„É™„Ç¨„Éº„Ç®„É©„Éº„ÅØ„É¨„Ç≥„Éº„ÉâÊåøÂÖ•„ÇíÈòªÂÆ≥„Åó„Å™„ÅÑ„Çà„ÅÜË≠¶Âëä„É¨„Éô„É´„ÅßË®òÈå≤
        RAISE WARNING '[trigger_auto_join_on_message] „Éà„É™„Ç¨„Éº„Ç®„É©„Éº - message_id=%, error=%', 
                      NEW.id, SQLERRM;
        RETURN NEW;
END;
$$;

-- ============================================
-- 3. „Éà„É™„Ç¨„ÉºÈñ¢Êï∞: „Ç≥„É°„É≥„ÉàÊäïÁ®øÊôÇ
-- ============================================
CREATE OR REPLACE FUNCTION trigger_auto_join_on_comment()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    v_result JSONB;
BEGIN
    RAISE NOTICE '[trigger_auto_join_on_comment] ÈñãÂßã - comment_id=%, user_id=%, topic_id=%', 
                 NEW.id, NEW.user_id, NEW.topic_id;
    
    v_result := auto_join_topic(NEW.user_id, NEW.topic_id);
    
    IF (v_result->>'success')::boolean THEN
        RAISE NOTICE '[trigger_auto_join_on_comment] ÊàêÂäü - action=%, comment_id=%', 
                     v_result->>'action', NEW.id;
    ELSE
        RAISE WARNING '[trigger_auto_join_on_comment] Â§±Êïó - error=%, comment_id=%', 
                      v_result->>'message', NEW.id;
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '[trigger_auto_join_on_comment] „Éà„É™„Ç¨„Éº„Ç®„É©„Éº - comment_id=%, error=%', 
                      NEW.id, SQLERRM;
        RETURN NEW;
END;
$$;

-- ============================================
-- 4. „Éà„É™„Ç¨„ÉºÈñ¢Êï∞: Ë©±È°å‰ΩúÊàêÊôÇ
-- ============================================
CREATE OR REPLACE FUNCTION trigger_auto_join_on_topic_create()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    v_result JSONB;
BEGIN
    RAISE NOTICE '[trigger_auto_join_on_topic_create] ÈñãÂßã - topic_id=%, creator_id=%', 
                 NEW.id, NEW.user_id;
    
    v_result := auto_join_topic(NEW.user_id, NEW.id);
    
    IF (v_result->>'success')::boolean THEN
        RAISE NOTICE '[trigger_auto_join_on_topic_create] ÊàêÂäü - action=%, topic_id=%', 
                     v_result->>'action', NEW.id;
    ELSE
        RAISE WARNING '[trigger_auto_join_on_topic_create] Â§±Êïó - error=%, topic_id=%', 
                      v_result->>'message', NEW.id;
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '[trigger_auto_join_on_topic_create] „Éà„É™„Ç¨„Éº„Ç®„É©„Éº - topic_id=%, error=%', 
                      NEW.id, SQLERRM;
        RETURN NEW;
END;
$$;

-- ============================================
-- 5. „Éà„É™„Ç¨„ÉºÈñ¢Êï∞: „ÅÑ„ÅÑ„Å≠ÊôÇÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
-- ============================================
CREATE OR REPLACE FUNCTION trigger_auto_join_on_like()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    v_result JSONB;
BEGIN
    RAISE NOTICE '[trigger_auto_join_on_like] ÈñãÂßã - like_id=%, user_id=%, topic_id=%', 
                 NEW.id, NEW.user_id, NEW.topic_id;
    
    v_result := auto_join_topic(NEW.user_id, NEW.topic_id);
    
    IF (v_result->>'success')::boolean THEN
        RAISE NOTICE '[trigger_auto_join_on_like] ÊàêÂäü - action=%, like_id=%', 
                     v_result->>'action', NEW.id;
    ELSE
        RAISE NOTICE '[trigger_auto_join_on_like] „Çπ„Ç≠„ÉÉ„Éó - reason=%, like_id=%', 
                     v_result->>'message', NEW.id;
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '[trigger_auto_join_on_like] „Éà„É™„Ç¨„Éº„Ç®„É©„Éº - like_id=%, error=%', 
                      NEW.id, SQLERRM;
        RETURN NEW;
END;
$$;

-- ============================================
-- 6. „Éà„É™„Ç¨„Éº„ÅÆ‰ΩúÊàê
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üîß „Éà„É™„Ç¨„Éº„Çí‰ΩúÊàê‰∏≠...';
    
    -- „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÊôÇ„ÅÆËá™ÂãïÂèÇÂä†
    CREATE TRIGGER auto_join_on_chat_message
        AFTER INSERT ON chat_messages
        FOR EACH ROW
        EXECUTE FUNCTION trigger_auto_join_on_message();
    RAISE NOTICE '   ‚úÖ auto_join_on_chat_message „Éà„É™„Ç¨„Éº‰ΩúÊàêÂÆå‰∫Ü';

    -- „Ç≥„É°„É≥„ÉàÊäïÁ®øÊôÇ„ÅÆËá™ÂãïÂèÇÂä†
    CREATE TRIGGER auto_join_on_comment
        AFTER INSERT ON comments
        FOR EACH ROW
        EXECUTE FUNCTION trigger_auto_join_on_comment();
    RAISE NOTICE '   ‚úÖ auto_join_on_comment „Éà„É™„Ç¨„Éº‰ΩúÊàêÂÆå‰∫Ü';

    -- Ë©±È°å‰ΩúÊàêÊôÇ„ÅÆËá™ÂãïÂèÇÂä†
    CREATE TRIGGER auto_join_on_topic_create
        AFTER INSERT ON topics
        FOR EACH ROW
        EXECUTE FUNCTION trigger_auto_join_on_topic_create();
    RAISE NOTICE '   ‚úÖ auto_join_on_topic_create „Éà„É™„Ç¨„Éº‰ΩúÊàêÂÆå‰∫Ü';

    -- „ÅÑ„ÅÑ„Å≠ÊôÇ„ÅÆËá™ÂãïÂèÇÂä†Ôºà„Ç™„Éó„Ç∑„Éß„É≥ - ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„ÉàÂèØËÉΩÔºâ
    CREATE TRIGGER auto_join_on_topic_like
        AFTER INSERT ON topic_likes
        FOR EACH ROW
        EXECUTE FUNCTION trigger_auto_join_on_like();
    RAISE NOTICE '   ‚úÖ auto_join_on_topic_like „Éà„É™„Ç¨„Éº‰ΩúÊàêÂÆå‰∫Ü';
    
END $$;

-- ============================================
-- 7. „Éá„Éº„Çø‰øÆÂæ©Èñ¢Êï∞
-- ============================================
CREATE OR REPLACE FUNCTION repair_missing_participants()
RETURNS JSONB
LANGUAGE plpgsql
AS $$
DECLARE
    v_repair_start_time TIMESTAMP;
    v_chat_count INTEGER := 0;
    v_comment_count INTEGER := 0;
    v_topic_count INTEGER := 0;
    v_like_count INTEGER := 0;
    v_total_before INTEGER := 0;
    v_total_after INTEGER := 0;
BEGIN
    v_repair_start_time := NOW();
    RAISE NOTICE '[repair_missing_participants] ‰øÆÂæ©ÈñãÂßã: %', v_repair_start_time;

    -- ‰øÆÂæ©Ââç„ÅÆÂèÇÂä†ËÄÖÊï∞
    SELECT COUNT(*) INTO v_total_before FROM topic_participants;
    RAISE NOTICE '[repair_missing_participants] ‰øÆÂæ©Ââç„ÅÆÂèÇÂä†ËÄÖÊï∞: %', v_total_before;

    -- „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Åã„Çâ‰øÆÂæ©
    WITH missing_chat_participants AS (
        SELECT DISTINCT 
            cm.user_id,
            cm.topic_id,
            MIN(cm.created_at) as first_message_at
        FROM chat_messages cm
        LEFT JOIN topic_participants tp 
            ON tp.user_id = cm.user_id 
            AND tp.topic_id = cm.topic_id
        WHERE tp.id IS NULL
            AND cm.user_id IS NOT NULL
            AND cm.topic_id IS NOT NULL
            AND EXISTS(SELECT 1 FROM users WHERE id = cm.user_id)
            AND EXISTS(SELECT 1 FROM topics WHERE id = cm.topic_id)
        GROUP BY cm.user_id, cm.topic_id
    )
    INSERT INTO topic_participants (user_id, topic_id, is_active, joined_at)
    SELECT user_id, topic_id, TRUE, first_message_at
    FROM missing_chat_participants
    ON CONFLICT (topic_id, user_id) DO NOTHING;
    GET DIAGNOSTICS v_chat_count = ROW_COUNT;
    RAISE NOTICE '[repair_missing_participants] „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Åã„Çâ‰øÆÂæ©: % ‰ª∂', v_chat_count;

    -- „Ç≥„É°„É≥„Éà„Åã„Çâ‰øÆÂæ©
    WITH missing_comment_participants AS (
        SELECT DISTINCT 
            c.user_id,
            c.topic_id,
            MIN(c.created_at) as first_comment_at
        FROM comments c
        LEFT JOIN topic_participants tp 
            ON tp.user_id = c.user_id 
            AND tp.topic_id = c.topic_id
        WHERE tp.id IS NULL
            AND c.user_id IS NOT NULL
            AND c.topic_id IS NOT NULL
            AND EXISTS(SELECT 1 FROM users WHERE id = c.user_id)
            AND EXISTS(SELECT 1 FROM topics WHERE id = c.topic_id)
        GROUP BY c.user_id, c.topic_id
    )
    INSERT INTO topic_participants (user_id, topic_id, is_active, joined_at)
    SELECT user_id, topic_id, TRUE, first_comment_at
    FROM missing_comment_participants
    ON CONFLICT (topic_id, user_id) DO NOTHING;
    GET DIAGNOSTICS v_comment_count = ROW_COUNT;
    RAISE NOTICE '[repair_missing_participants] „Ç≥„É°„É≥„Éà„Åã„Çâ‰øÆÂæ©: % ‰ª∂', v_comment_count;

    -- Ë©±È°å‰ΩúÊàêËÄÖ„Åã„Çâ‰øÆÂæ©
    INSERT INTO topic_participants (user_id, topic_id, is_active, joined_at)
    SELECT DISTINCT 
        t.user_id,
        t.id,
        TRUE,
        t.created_at
    FROM topics t
    LEFT JOIN topic_participants tp 
        ON tp.user_id = t.user_id 
        AND tp.topic_id = t.id
    WHERE tp.id IS NULL
        AND t.user_id IS NOT NULL
        AND EXISTS(SELECT 1 FROM users WHERE id = t.user_id)
    ON CONFLICT (topic_id, user_id) DO NOTHING;
    GET DIAGNOSTICS v_topic_count = ROW_COUNT;
    RAISE NOTICE '[repair_missing_participants] Ë©±È°å‰ΩúÊàêËÄÖ„Åã„Çâ‰øÆÂæ©: % ‰ª∂', v_topic_count;

    -- „ÅÑ„ÅÑ„Å≠„Åã„Çâ‰øÆÂæ©Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    WITH missing_like_participants AS (
        SELECT DISTINCT 
            tl.user_id,
            tl.topic_id,
            MIN(tl.created_at) as first_like_at
        FROM topic_likes tl
        LEFT JOIN topic_participants tp 
            ON tp.user_id = tl.user_id 
            AND tp.topic_id = tl.topic_id
        WHERE tp.id IS NULL
            AND tl.user_id IS NOT NULL
            AND tl.topic_id IS NOT NULL
            AND EXISTS(SELECT 1 FROM users WHERE id = tl.user_id)
            AND EXISTS(SELECT 1 FROM topics WHERE id = tl.topic_id)
        GROUP BY tl.user_id, tl.topic_id
    )
    INSERT INTO topic_participants (user_id, topic_id, is_active, joined_at)
    SELECT user_id, topic_id, TRUE, first_like_at
    FROM missing_like_participants
    ON CONFLICT (topic_id, user_id) DO NOTHING;
    GET DIAGNOSTICS v_like_count = ROW_COUNT;
    RAISE NOTICE '[repair_missing_participants] „ÅÑ„ÅÑ„Å≠„Åã„Çâ‰øÆÂæ©: % ‰ª∂', v_like_count;

    -- ‰øÆÂæ©Âæå„ÅÆÂèÇÂä†ËÄÖÊï∞
    SELECT COUNT(*) INTO v_total_after FROM topic_participants;
    RAISE NOTICE '[repair_missing_participants] ‰øÆÂæ©ÂÆå‰∫Ü - ‰øÆÂæ©Ââç: %, ‰øÆÂæ©Âæå: %, ËøΩÂä†: %', 
                 v_total_before, v_total_after, (v_total_after - v_total_before);

    RETURN jsonb_build_object(
        'success', true,
        'repair_summary', jsonb_build_object(
            'before_count', v_total_before,
            'after_count', v_total_after,
            'total_added', v_total_after - v_total_before,
            'from_messages', v_chat_count,
            'from_comments', v_comment_count,
            'from_topics', v_topic_count,
            'from_likes', v_like_count
        ),
        'execution_time_ms', EXTRACT(MILLISECONDS FROM (NOW() - v_repair_start_time)),
        'timestamp', NOW()
    );
END;
$$;

-- ============================================
-- 8. Áµ±Ë®à„Éì„É•„Éº„ÅÆ‰ΩúÊàê
-- ============================================
CREATE OR REPLACE VIEW topic_participation_stats AS
SELECT 
    t.id as topic_id,
    t.title,
    t.user_id as creator_id,
    u.nickname as creator_name,
    t.created_at as topic_created_at,
    COUNT(DISTINCT tp.user_id) FILTER (WHERE tp.is_active = true) as active_participants,
    COUNT(DISTINCT tp.user_id) as total_participants,
    COUNT(DISTINCT cm.id) as message_count,
    COUNT(DISTINCT c.id) as comment_count,
    COUNT(DISTINCT tl.id) as like_count,
    MAX(tp.joined_at) as last_join_date,
    GREATEST(MAX(cm.created_at), MAX(c.created_at)) as last_activity_at
FROM topics t
LEFT JOIN users u ON u.id = t.user_id
LEFT JOIN topic_participants tp ON tp.topic_id = t.id
LEFT JOIN chat_messages cm ON cm.topic_id = t.id
LEFT JOIN comments c ON c.topic_id = t.id
LEFT JOIN topic_likes tl ON tl.topic_id = t.id
WHERE (t.is_hidden IS NULL OR t.is_hidden = false)
GROUP BY t.id, t.title, t.user_id, u.nickname, t.created_at;

-- ============================================
-- 9. Êó¢Â≠ò„Éá„Éº„Çø„ÅÆ‰øÆÂæ©ÂÆüË°å
-- ============================================
SELECT 'üìä ‰øÆÂæ©Ââç„ÅÆÁµ±Ë®à' as info, * FROM (
    SELECT 
        COUNT(*) as total_participants,
        COUNT(DISTINCT user_id) as unique_users,
        COUNT(DISTINCT topic_id) as unique_topics,
        COUNT(CASE WHEN is_active THEN 1 END) as active_participants
    FROM topic_participants
) stats;

-- ‰øÆÂæ©ÂÆüË°å
SELECT 'üîß Êó¢Â≠ò„Éá„Éº„Çø„ÅÆ‰øÆÂæ©„ÇíÂÆüË°å‰∏≠...' as status;
SELECT repair_missing_participants();

-- ‰øÆÂæ©Âæå„ÅÆÁµ±Ë®à
SELECT 'üìä ‰øÆÂæ©Âæå„ÅÆÁµ±Ë®à' as info, * FROM (
    SELECT 
        COUNT(*) as total_participants,
        COUNT(DISTINCT user_id) as unique_users,
        COUNT(DISTINCT topic_id) as unique_topics,
        COUNT(CASE WHEN is_active THEN 1 END) as active_participants
    FROM topic_participants
) stats;

-- ============================================
-- 10. „Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™ç
-- ============================================

-- „Éà„É™„Ç¨„Éº„ÅÆÁ¢∫Ë™ç
SELECT 
    '‚úÖ „Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Åü„Éà„É™„Ç¨„Éº' as info,
    trigger_name,
    event_object_table as target_table
FROM information_schema.triggers
WHERE trigger_schema = 'public'
    AND trigger_name LIKE 'auto_join_%'
ORDER BY event_object_table, trigger_name;

-- Èñ¢Êï∞„ÅÆÁ¢∫Ë™ç
SELECT 
    '‚úÖ „Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„ÅüÈñ¢Êï∞' as info,
    routine_name as function_name,
    data_type as return_type
FROM information_schema.routines
WHERE routine_schema = 'public'
    AND routine_name LIKE '%auto_join%'
ORDER BY routine_name;

-- ÊúÄÁµÇÁ¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏
SELECT 
    'üéâ Ëá™ÂãïÂèÇÂä†„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü' as status,
    'Êñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÄÅ„Ç≥„É°„É≥„Éà„ÄÅË©±È°å‰ΩúÊàêÊôÇ„Å´Ëá™ÂãïÂèÇÂä†Ê©üËÉΩ„ÅåÂãï‰Ωú„Åó„Åæ„Åô' as message,
    NOW()::text as completed_at;

-- ============================================
-- ‰ΩøÁî®ÊñπÊ≥ï„Å®„ÉÜ„Çπ„ÉàÊâãÈ†Ü
-- ============================================
/*
üöÄ „Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫ÜÔºÅ

üìã „ÉÜ„Çπ„ÉàÊâãÈ†Ü:
1. Êñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ
2. Êñ∞„Åó„ÅÑ„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ
3. Êñ∞„Åó„ÅÑË©±È°å„Çí‰ΩúÊàê„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ
4. topic_participants „ÉÜ„Éº„Éñ„É´„ÅßËá™ÂãïÂèÇÂä†„ÇíÁ¢∫Ë™ç

üîç „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞:
- „É≠„Ç∞„ÇíÁ¢∫Ë™ç: Supabase „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ ‚Üí Logs
- ÂèÇÂä†ËÄÖÁ¢∫Ë™ç: SELECT * FROM topic_participants ORDER BY joined_at DESC LIMIT 10;
- Áµ±Ë®àÁ¢∫Ë™ç: SELECT * FROM topic_participation_stats LIMIT 5;

‚öôÔ∏è Ë®≠ÂÆö„Ç™„Éó„Ç∑„Éß„É≥:
- „ÅÑ„ÅÑ„Å≠ÊôÇ„ÅÆËá™ÂãïÂèÇÂä†„ÇíÁÑ°Âäπ„Å´„Åó„Åü„ÅÑÂ†¥Âêà:
  DROP TRIGGER auto_join_on_topic_like ON topic_likes;

üìû „Çµ„Éù„Éº„Éà:
‰Ωï„ÅãÂïèÈ°å„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ‰∏äË®ò„ÅÆ„É≠„Ç∞„Å®„ÇØ„Ç®„É™ÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
*/